//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pheko.WebPresentation.PhekoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityUserDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class SecurityUserDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.SecurityUserDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.SecurityUserDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityUserDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class SecurityUserDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.SecurityUserDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.SecurityUserDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientDetailResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientDetailResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientDto PatientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientMedicalAidDependancyDto[] PatientMedicalAidDependanciesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientDto Patient {
            get {
                return this.PatientField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientField, value) != true)) {
                    this.PatientField = value;
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientMedicalAidDependancyDto[] PatientMedicalAidDependancies {
            get {
                return this.PatientMedicalAidDependanciesField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientMedicalAidDependanciesField, value) != true)) {
                    this.PatientMedicalAidDependanciesField = value;
                    this.RaisePropertyChanged("PatientMedicalAidDependancies");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientMedicalAidDependancyDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientMedicalAidDependancyDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientMedicalAidDependancyDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientMedicalAidDependancyDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientConsultationDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientConsultationDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientConsultationDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientConsultationDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientConsultationDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientConsultationDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientConsultationDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientConsultationDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientVitalSignDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientVitalSignDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientVitalSignDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientVitalSignDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientVitalSignDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientVitalSignDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientVitalSignDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientVitalSignDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientMedicalNoteDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientMedicalNoteDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientMedicalNoteDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientMedicalNoteDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientMedicalNoteDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientMedicalNoteDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientMedicalNoteDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientMedicalNoteDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientChronicDeseaseDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientChronicDeseaseDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientChronicDeseaseDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientChronicDeseaseDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientChronicDeseaseDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientChronicDeseaseDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientChronicDeseaseDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientChronicDeseaseDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientDeseaseScreeningDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientDeseaseScreeningDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientDeseaseScreeningDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientDeseaseScreeningDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientDeseaseScreeningDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientDeseaseScreeningDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientDeseaseScreeningDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientDeseaseScreeningDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientPastMedicalHistoryDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientPastMedicalHistoryDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientPastMedicalHistoryDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientPastMedicalHistoryDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientPastMedicalHistoryDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientPastMedicalHistoryDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientPastMedicalHistoryDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientPastMedicalHistoryDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientClinicalExaminationDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientClinicalExaminationDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientClinicalExaminationDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientClinicalExaminationDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientClinicalExaminationDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientClinicalExaminationDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientClinicalExaminationDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientClinicalExaminationDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientMedicalMonitoringDtoResult", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientMedicalMonitoringDtoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientMedicalMonitoringDto[] ModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientMedicalMonitoringDto[] Models {
            get {
                return this.ModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelsField, value) != true)) {
                    this.ModelsField = value;
                    this.RaisePropertyChanged("Models");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientMedicalMonitoringDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientMedicalMonitoringDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientMedicalMonitoringDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientMedicalMonitoringDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientConsultationSickNoteDtoResponse", Namespace="http://schemas.datacontract.org/2004/07/Pheko.ServicePresentation.ServiceResponse" +
        "s")]
    [System.SerializableAttribute()]
    public partial class PatientConsultationSickNoteDtoResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.UtilityComponent.FieldError[] FieldErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.UtilityComponent.FieldError[] FieldErrors {
            get {
                return this.FieldErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldErrorsField, value) != true)) {
                    this.FieldErrorsField = value;
                    this.RaisePropertyChanged("FieldErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhekoService.IPhekoService")]
    public interface IPhekoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/Login", ReplyAction="http://tempuri.org/IPhekoService/LoginResponse")]
        Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/Login", ReplyAction="http://tempuri.org/IPhekoService/LoginResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/ResetPassword", ReplyAction="http://tempuri.org/IPhekoService/ResetPasswordResponse")]
        Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse ResetPassword(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/ResetPassword", ReplyAction="http://tempuri.org/IPhekoService/ResetPasswordResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse> ResetPasswordAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/ChangePassword", ReplyAction="http://tempuri.org/IPhekoService/ChangePasswordResponse")]
        Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse ChangePassword(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/ChangePassword", ReplyAction="http://tempuri.org/IPhekoService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse> ChangePasswordAsync(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SaveUser", ReplyAction="http://tempuri.org/IPhekoService/SaveUserResponse")]
        Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse SaveUser(Pheko.Common.DataTransformObjects.SecurityUserDto securityUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SaveUser", ReplyAction="http://tempuri.org/IPhekoService/SaveUserResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse> SaveUserAsync(Pheko.Common.DataTransformObjects.SecurityUserDto securityUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetUsers", ReplyAction="http://tempuri.org/IPhekoService/GetUsersResponse")]
        Pheko.WebPresentation.PhekoService.SecurityUserDtoResult GetUsers(string searchText, Pheko.Common.UtilityComponent.ModelPager modelPager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetUsers", ReplyAction="http://tempuri.org/IPhekoService/GetUsersResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResult> GetUsersAsync(string searchText, Pheko.Common.UtilityComponent.ModelPager modelPager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientDetails", ReplyAction="http://tempuri.org/IPhekoService/GetPatientDetailsResponse")]
        Pheko.WebPresentation.PhekoService.PatientDetailResponse GetPatientDetails(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientDetails", ReplyAction="http://tempuri.org/IPhekoService/GetPatientDetailsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDetailResponse> GetPatientDetailsAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/Search", ReplyAction="http://tempuri.org/IPhekoService/SearchResponse")]
        Pheko.WebPresentation.PhekoService.PatientDtoResult Search(Pheko.Common.DataTransformObjects.PatientDto searchPatient, Pheko.Common.UtilityComponent.ModelPager modelPager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/Search", ReplyAction="http://tempuri.org/IPhekoService/SearchResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDtoResult> SearchAsync(Pheko.Common.DataTransformObjects.PatientDto searchPatient, Pheko.Common.UtilityComponent.ModelPager modelPager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatient", ReplyAction="http://tempuri.org/IPhekoService/SavePatientResponse")]
        Pheko.WebPresentation.PhekoService.PatientDetailResponse SavePatient(Pheko.Common.DataTransformObjects.PatientDto patientDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatient", ReplyAction="http://tempuri.org/IPhekoService/SavePatientResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDetailResponse> SavePatientAsync(Pheko.Common.DataTransformObjects.PatientDto patientDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientMedicalAidDependancy", ReplyAction="http://tempuri.org/IPhekoService/SavePatientMedicalAidDependancyResponse")]
        Pheko.WebPresentation.PhekoService.PatientMedicalAidDependancyDtoResponse SavePatientMedicalAidDependancy(Pheko.Common.DataTransformObjects.PatientMedicalAidDependancyDto patientMedicalAidDependancyDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientMedicalAidDependancy", ReplyAction="http://tempuri.org/IPhekoService/SavePatientMedicalAidDependancyResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalAidDependancyDtoResponse> SavePatientMedicalAidDependancyAsync(Pheko.Common.DataTransformObjects.PatientMedicalAidDependancyDto patientMedicalAidDependancyDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientConsultation", ReplyAction="http://tempuri.org/IPhekoService/SavePatientConsultationResponse")]
        Pheko.WebPresentation.PhekoService.PatientConsultationDtoResponse SavePatientConsultation(Pheko.Common.DataTransformObjects.PatientConsultationDto patientConsultationDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientConsultation", ReplyAction="http://tempuri.org/IPhekoService/SavePatientConsultationResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientConsultationDtoResponse> SavePatientConsultationAsync(Pheko.Common.DataTransformObjects.PatientConsultationDto patientConsultationDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientConsultations", ReplyAction="http://tempuri.org/IPhekoService/GetPatientConsultationsResponse")]
        Pheko.WebPresentation.PhekoService.PatientConsultationDtoResult GetPatientConsultations(int patientId, string searchText, Pheko.Common.UtilityComponent.ModelPager modelPager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientConsultations", ReplyAction="http://tempuri.org/IPhekoService/GetPatientConsultationsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientConsultationDtoResult> GetPatientConsultationsAsync(int patientId, string searchText, Pheko.Common.UtilityComponent.ModelPager modelPager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientVitalSigns", ReplyAction="http://tempuri.org/IPhekoService/GetPatientVitalSignsResponse")]
        Pheko.WebPresentation.PhekoService.PatientVitalSignDtoResult GetPatientVitalSigns(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientVitalSigns", ReplyAction="http://tempuri.org/IPhekoService/GetPatientVitalSignsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientVitalSignDtoResult> GetPatientVitalSignsAsync(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientVitalSigns", ReplyAction="http://tempuri.org/IPhekoService/SavePatientVitalSignsResponse")]
        Pheko.WebPresentation.PhekoService.PatientVitalSignDtoResponse SavePatientVitalSigns(Pheko.Common.DataTransformObjects.PatientVitalSignDto[] patientVitalSigns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientVitalSigns", ReplyAction="http://tempuri.org/IPhekoService/SavePatientVitalSignsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientVitalSignDtoResponse> SavePatientVitalSignsAsync(Pheko.Common.DataTransformObjects.PatientVitalSignDto[] patientVitalSigns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientMedicalNotes", ReplyAction="http://tempuri.org/IPhekoService/GetPatientMedicalNotesResponse")]
        Pheko.WebPresentation.PhekoService.PatientMedicalNoteDtoResult GetPatientMedicalNotes(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientMedicalNotes", ReplyAction="http://tempuri.org/IPhekoService/GetPatientMedicalNotesResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalNoteDtoResult> GetPatientMedicalNotesAsync(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientMedicalNotes", ReplyAction="http://tempuri.org/IPhekoService/SavePatientMedicalNotesResponse")]
        Pheko.WebPresentation.PhekoService.PatientMedicalNoteDtoResponse SavePatientMedicalNotes(Pheko.Common.DataTransformObjects.PatientMedicalNoteDto[] patientMedicalNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientMedicalNotes", ReplyAction="http://tempuri.org/IPhekoService/SavePatientMedicalNotesResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalNoteDtoResponse> SavePatientMedicalNotesAsync(Pheko.Common.DataTransformObjects.PatientMedicalNoteDto[] patientMedicalNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientChronicDeseases", ReplyAction="http://tempuri.org/IPhekoService/GetPatientChronicDeseasesResponse")]
        Pheko.WebPresentation.PhekoService.PatientChronicDeseaseDtoResult GetPatientChronicDeseases(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientChronicDeseases", ReplyAction="http://tempuri.org/IPhekoService/GetPatientChronicDeseasesResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientChronicDeseaseDtoResult> GetPatientChronicDeseasesAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientChronicDeseases", ReplyAction="http://tempuri.org/IPhekoService/SavePatientChronicDeseasesResponse")]
        Pheko.WebPresentation.PhekoService.PatientChronicDeseaseDtoResponse SavePatientChronicDeseases(Pheko.Common.DataTransformObjects.PatientChronicDeseaseDto[] patientChronicDeseases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientChronicDeseases", ReplyAction="http://tempuri.org/IPhekoService/SavePatientChronicDeseasesResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientChronicDeseaseDtoResponse> SavePatientChronicDeseasesAsync(Pheko.Common.DataTransformObjects.PatientChronicDeseaseDto[] patientChronicDeseases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientDeseaseScreenings", ReplyAction="http://tempuri.org/IPhekoService/GetPatientDeseaseScreeningsResponse")]
        Pheko.WebPresentation.PhekoService.PatientDeseaseScreeningDtoResult GetPatientDeseaseScreenings(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientDeseaseScreenings", ReplyAction="http://tempuri.org/IPhekoService/GetPatientDeseaseScreeningsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDeseaseScreeningDtoResult> GetPatientDeseaseScreeningsAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientDeseaseScreenings", ReplyAction="http://tempuri.org/IPhekoService/SavePatientDeseaseScreeningsResponse")]
        Pheko.WebPresentation.PhekoService.PatientDeseaseScreeningDtoResponse SavePatientDeseaseScreenings(Pheko.Common.DataTransformObjects.PatientDeseaseScreeningDto[] patientDeseaseScreenings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientDeseaseScreenings", ReplyAction="http://tempuri.org/IPhekoService/SavePatientDeseaseScreeningsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDeseaseScreeningDtoResponse> SavePatientDeseaseScreeningsAsync(Pheko.Common.DataTransformObjects.PatientDeseaseScreeningDto[] patientDeseaseScreenings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientPastMedicalHistories", ReplyAction="http://tempuri.org/IPhekoService/GetPatientPastMedicalHistoriesResponse")]
        Pheko.WebPresentation.PhekoService.PatientPastMedicalHistoryDtoResult GetPatientPastMedicalHistories(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientPastMedicalHistories", ReplyAction="http://tempuri.org/IPhekoService/GetPatientPastMedicalHistoriesResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientPastMedicalHistoryDtoResult> GetPatientPastMedicalHistoriesAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientPastMedicalHistories", ReplyAction="http://tempuri.org/IPhekoService/SavePatientPastMedicalHistoriesResponse")]
        Pheko.WebPresentation.PhekoService.PatientPastMedicalHistoryDtoResponse SavePatientPastMedicalHistories(Pheko.Common.DataTransformObjects.PatientPastMedicalHistoryDto[] patientPastMedicalHistories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientPastMedicalHistories", ReplyAction="http://tempuri.org/IPhekoService/SavePatientPastMedicalHistoriesResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientPastMedicalHistoryDtoResponse> SavePatientPastMedicalHistoriesAsync(Pheko.Common.DataTransformObjects.PatientPastMedicalHistoryDto[] patientPastMedicalHistories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientClinicalExaminations", ReplyAction="http://tempuri.org/IPhekoService/GetPatientClinicalExaminationsResponse")]
        Pheko.WebPresentation.PhekoService.PatientClinicalExaminationDtoResult GetPatientClinicalExaminations(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientClinicalExaminations", ReplyAction="http://tempuri.org/IPhekoService/GetPatientClinicalExaminationsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientClinicalExaminationDtoResult> GetPatientClinicalExaminationsAsync(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientClinicalExaminations", ReplyAction="http://tempuri.org/IPhekoService/SavePatientClinicalExaminationsResponse")]
        Pheko.WebPresentation.PhekoService.PatientClinicalExaminationDtoResponse SavePatientClinicalExaminations(Pheko.Common.DataTransformObjects.PatientClinicalExaminationDto[] patientClinicalExaminations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientClinicalExaminations", ReplyAction="http://tempuri.org/IPhekoService/SavePatientClinicalExaminationsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientClinicalExaminationDtoResponse> SavePatientClinicalExaminationsAsync(Pheko.Common.DataTransformObjects.PatientClinicalExaminationDto[] patientClinicalExaminations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientMedicalMonitorings", ReplyAction="http://tempuri.org/IPhekoService/GetPatientMedicalMonitoringsResponse")]
        Pheko.WebPresentation.PhekoService.PatientMedicalMonitoringDtoResult GetPatientMedicalMonitorings(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientMedicalMonitorings", ReplyAction="http://tempuri.org/IPhekoService/GetPatientMedicalMonitoringsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalMonitoringDtoResult> GetPatientMedicalMonitoringsAsync(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientMedicalMonitorings", ReplyAction="http://tempuri.org/IPhekoService/SavePatientMedicalMonitoringsResponse")]
        Pheko.WebPresentation.PhekoService.PatientMedicalMonitoringDtoResponse SavePatientMedicalMonitorings(Pheko.Common.DataTransformObjects.PatientMedicalMonitoringDto[] patientMedicalMonitorings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientMedicalMonitorings", ReplyAction="http://tempuri.org/IPhekoService/SavePatientMedicalMonitoringsResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalMonitoringDtoResponse> SavePatientMedicalMonitoringsAsync(Pheko.Common.DataTransformObjects.PatientMedicalMonitoringDto[] patientMedicalMonitorings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientConsultationSickNote", ReplyAction="http://tempuri.org/IPhekoService/GetPatientConsultationSickNoteResponse")]
        Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto GetPatientConsultationSickNote(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientConsultationSickNote", ReplyAction="http://tempuri.org/IPhekoService/GetPatientConsultationSickNoteResponse")]
        System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto> GetPatientConsultationSickNoteAsync(int patientConsultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientConsultationSickNote", ReplyAction="http://tempuri.org/IPhekoService/SavePatientConsultationSickNoteResponse")]
        Pheko.WebPresentation.PhekoService.PatientConsultationSickNoteDtoResponse SavePatientConsultationSickNote(Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto patientConsultationSickNoteDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/SavePatientConsultationSickNote", ReplyAction="http://tempuri.org/IPhekoService/SavePatientConsultationSickNoteResponse")]
        System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientConsultationSickNoteDtoResponse> SavePatientConsultationSickNoteAsync(Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto patientConsultationSickNoteDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetCountries", ReplyAction="http://tempuri.org/IPhekoService/GetCountriesResponse")]
        Pheko.Common.DataTransformObjects.CountryDto[] GetCountries();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetCountries", ReplyAction="http://tempuri.org/IPhekoService/GetCountriesResponse")]
        System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.CountryDto[]> GetCountriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetCountryProvinces", ReplyAction="http://tempuri.org/IPhekoService/GetCountryProvincesResponse")]
        Pheko.Common.DataTransformObjects.ProvinceDto[] GetCountryProvinces(System.Nullable<int> countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetCountryProvinces", ReplyAction="http://tempuri.org/IPhekoService/GetCountryProvincesResponse")]
        System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.ProvinceDto[]> GetCountryProvincesAsync(System.Nullable<int> countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetFieldValues", ReplyAction="http://tempuri.org/IPhekoService/GetFieldValuesResponse")]
        Pheko.Common.DataTransformObjects.FieldValueDto[] GetFieldValues(string tableName, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetFieldValues", ReplyAction="http://tempuri.org/IPhekoService/GetFieldValuesResponse")]
        System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.FieldValueDto[]> GetFieldValuesAsync(string tableName, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetDoctors", ReplyAction="http://tempuri.org/IPhekoService/GetDoctorsResponse")]
        Pheko.Common.DataTransformObjects.DoctorDto[] GetDoctors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetDoctors", ReplyAction="http://tempuri.org/IPhekoService/GetDoctorsResponse")]
        System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.DoctorDto[]> GetDoctorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetRoles", ReplyAction="http://tempuri.org/IPhekoService/GetRolesResponse")]
        Pheko.Common.DataTransformObjects.SecurityRoleDto[] GetRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetRoles", ReplyAction="http://tempuri.org/IPhekoService/GetRolesResponse")]
        System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.SecurityRoleDto[]> GetRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientSchedule", ReplyAction="http://tempuri.org/IPhekoService/GetPatientScheduleResponse")]
        System.Data.DataSet GetPatientSchedule(int patientId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientSchedule", ReplyAction="http://tempuri.org/IPhekoService/GetPatientScheduleResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientScheduleAsync(int patientId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientSickNoteSchedule", ReplyAction="http://tempuri.org/IPhekoService/GetPatientSickNoteScheduleResponse")]
        System.Data.DataSet GetPatientSickNoteSchedule(int patientConsultationId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientSickNoteSchedule", ReplyAction="http://tempuri.org/IPhekoService/GetPatientSickNoteScheduleResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientSickNoteScheduleAsync(int patientConsultationId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientScriptNoteSchedule", ReplyAction="http://tempuri.org/IPhekoService/GetPatientScriptNoteScheduleResponse")]
        System.Data.DataSet GetPatientScriptNoteSchedule(int patientConsultationId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhekoService/GetPatientScriptNoteSchedule", ReplyAction="http://tempuri.org/IPhekoService/GetPatientScriptNoteScheduleResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientScriptNoteScheduleAsync(int patientConsultationId, int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhekoServiceChannel : Pheko.WebPresentation.PhekoService.IPhekoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhekoServiceClient : System.ServiceModel.ClientBase<Pheko.WebPresentation.PhekoService.IPhekoService>, Pheko.WebPresentation.PhekoService.IPhekoService {
        
        public PhekoServiceClient() {
        }
        
        public PhekoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhekoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhekoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhekoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse ResetPassword(string username) {
            return base.Channel.ResetPassword(username);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse> ResetPasswordAsync(string username) {
            return base.Channel.ResetPasswordAsync(username);
        }
        
        public Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse ChangePassword(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(username, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse> ChangePasswordAsync(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(username, oldPassword, newPassword);
        }
        
        public Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse SaveUser(Pheko.Common.DataTransformObjects.SecurityUserDto securityUser) {
            return base.Channel.SaveUser(securityUser);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResponse> SaveUserAsync(Pheko.Common.DataTransformObjects.SecurityUserDto securityUser) {
            return base.Channel.SaveUserAsync(securityUser);
        }
        
        public Pheko.WebPresentation.PhekoService.SecurityUserDtoResult GetUsers(string searchText, Pheko.Common.UtilityComponent.ModelPager modelPager) {
            return base.Channel.GetUsers(searchText, modelPager);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.SecurityUserDtoResult> GetUsersAsync(string searchText, Pheko.Common.UtilityComponent.ModelPager modelPager) {
            return base.Channel.GetUsersAsync(searchText, modelPager);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientDetailResponse GetPatientDetails(int patientId) {
            return base.Channel.GetPatientDetails(patientId);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDetailResponse> GetPatientDetailsAsync(int patientId) {
            return base.Channel.GetPatientDetailsAsync(patientId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientDtoResult Search(Pheko.Common.DataTransformObjects.PatientDto searchPatient, Pheko.Common.UtilityComponent.ModelPager modelPager) {
            return base.Channel.Search(searchPatient, modelPager);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDtoResult> SearchAsync(Pheko.Common.DataTransformObjects.PatientDto searchPatient, Pheko.Common.UtilityComponent.ModelPager modelPager) {
            return base.Channel.SearchAsync(searchPatient, modelPager);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientDetailResponse SavePatient(Pheko.Common.DataTransformObjects.PatientDto patientDto) {
            return base.Channel.SavePatient(patientDto);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDetailResponse> SavePatientAsync(Pheko.Common.DataTransformObjects.PatientDto patientDto) {
            return base.Channel.SavePatientAsync(patientDto);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientMedicalAidDependancyDtoResponse SavePatientMedicalAidDependancy(Pheko.Common.DataTransformObjects.PatientMedicalAidDependancyDto patientMedicalAidDependancyDto) {
            return base.Channel.SavePatientMedicalAidDependancy(patientMedicalAidDependancyDto);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalAidDependancyDtoResponse> SavePatientMedicalAidDependancyAsync(Pheko.Common.DataTransformObjects.PatientMedicalAidDependancyDto patientMedicalAidDependancyDto) {
            return base.Channel.SavePatientMedicalAidDependancyAsync(patientMedicalAidDependancyDto);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientConsultationDtoResponse SavePatientConsultation(Pheko.Common.DataTransformObjects.PatientConsultationDto patientConsultationDto) {
            return base.Channel.SavePatientConsultation(patientConsultationDto);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientConsultationDtoResponse> SavePatientConsultationAsync(Pheko.Common.DataTransformObjects.PatientConsultationDto patientConsultationDto) {
            return base.Channel.SavePatientConsultationAsync(patientConsultationDto);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientConsultationDtoResult GetPatientConsultations(int patientId, string searchText, Pheko.Common.UtilityComponent.ModelPager modelPager) {
            return base.Channel.GetPatientConsultations(patientId, searchText, modelPager);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientConsultationDtoResult> GetPatientConsultationsAsync(int patientId, string searchText, Pheko.Common.UtilityComponent.ModelPager modelPager) {
            return base.Channel.GetPatientConsultationsAsync(patientId, searchText, modelPager);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientVitalSignDtoResult GetPatientVitalSigns(int patientConsultationId) {
            return base.Channel.GetPatientVitalSigns(patientConsultationId);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientVitalSignDtoResult> GetPatientVitalSignsAsync(int patientConsultationId) {
            return base.Channel.GetPatientVitalSignsAsync(patientConsultationId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientVitalSignDtoResponse SavePatientVitalSigns(Pheko.Common.DataTransformObjects.PatientVitalSignDto[] patientVitalSigns) {
            return base.Channel.SavePatientVitalSigns(patientVitalSigns);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientVitalSignDtoResponse> SavePatientVitalSignsAsync(Pheko.Common.DataTransformObjects.PatientVitalSignDto[] patientVitalSigns) {
            return base.Channel.SavePatientVitalSignsAsync(patientVitalSigns);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientMedicalNoteDtoResult GetPatientMedicalNotes(int patientConsultationId) {
            return base.Channel.GetPatientMedicalNotes(patientConsultationId);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalNoteDtoResult> GetPatientMedicalNotesAsync(int patientConsultationId) {
            return base.Channel.GetPatientMedicalNotesAsync(patientConsultationId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientMedicalNoteDtoResponse SavePatientMedicalNotes(Pheko.Common.DataTransformObjects.PatientMedicalNoteDto[] patientMedicalNotes) {
            return base.Channel.SavePatientMedicalNotes(patientMedicalNotes);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalNoteDtoResponse> SavePatientMedicalNotesAsync(Pheko.Common.DataTransformObjects.PatientMedicalNoteDto[] patientMedicalNotes) {
            return base.Channel.SavePatientMedicalNotesAsync(patientMedicalNotes);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientChronicDeseaseDtoResult GetPatientChronicDeseases(int patientId) {
            return base.Channel.GetPatientChronicDeseases(patientId);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientChronicDeseaseDtoResult> GetPatientChronicDeseasesAsync(int patientId) {
            return base.Channel.GetPatientChronicDeseasesAsync(patientId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientChronicDeseaseDtoResponse SavePatientChronicDeseases(Pheko.Common.DataTransformObjects.PatientChronicDeseaseDto[] patientChronicDeseases) {
            return base.Channel.SavePatientChronicDeseases(patientChronicDeseases);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientChronicDeseaseDtoResponse> SavePatientChronicDeseasesAsync(Pheko.Common.DataTransformObjects.PatientChronicDeseaseDto[] patientChronicDeseases) {
            return base.Channel.SavePatientChronicDeseasesAsync(patientChronicDeseases);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientDeseaseScreeningDtoResult GetPatientDeseaseScreenings(int patientId) {
            return base.Channel.GetPatientDeseaseScreenings(patientId);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDeseaseScreeningDtoResult> GetPatientDeseaseScreeningsAsync(int patientId) {
            return base.Channel.GetPatientDeseaseScreeningsAsync(patientId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientDeseaseScreeningDtoResponse SavePatientDeseaseScreenings(Pheko.Common.DataTransformObjects.PatientDeseaseScreeningDto[] patientDeseaseScreenings) {
            return base.Channel.SavePatientDeseaseScreenings(patientDeseaseScreenings);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientDeseaseScreeningDtoResponse> SavePatientDeseaseScreeningsAsync(Pheko.Common.DataTransformObjects.PatientDeseaseScreeningDto[] patientDeseaseScreenings) {
            return base.Channel.SavePatientDeseaseScreeningsAsync(patientDeseaseScreenings);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientPastMedicalHistoryDtoResult GetPatientPastMedicalHistories(int patientId) {
            return base.Channel.GetPatientPastMedicalHistories(patientId);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientPastMedicalHistoryDtoResult> GetPatientPastMedicalHistoriesAsync(int patientId) {
            return base.Channel.GetPatientPastMedicalHistoriesAsync(patientId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientPastMedicalHistoryDtoResponse SavePatientPastMedicalHistories(Pheko.Common.DataTransformObjects.PatientPastMedicalHistoryDto[] patientPastMedicalHistories) {
            return base.Channel.SavePatientPastMedicalHistories(patientPastMedicalHistories);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientPastMedicalHistoryDtoResponse> SavePatientPastMedicalHistoriesAsync(Pheko.Common.DataTransformObjects.PatientPastMedicalHistoryDto[] patientPastMedicalHistories) {
            return base.Channel.SavePatientPastMedicalHistoriesAsync(patientPastMedicalHistories);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientClinicalExaminationDtoResult GetPatientClinicalExaminations(int patientConsultationId) {
            return base.Channel.GetPatientClinicalExaminations(patientConsultationId);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientClinicalExaminationDtoResult> GetPatientClinicalExaminationsAsync(int patientConsultationId) {
            return base.Channel.GetPatientClinicalExaminationsAsync(patientConsultationId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientClinicalExaminationDtoResponse SavePatientClinicalExaminations(Pheko.Common.DataTransformObjects.PatientClinicalExaminationDto[] patientClinicalExaminations) {
            return base.Channel.SavePatientClinicalExaminations(patientClinicalExaminations);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientClinicalExaminationDtoResponse> SavePatientClinicalExaminationsAsync(Pheko.Common.DataTransformObjects.PatientClinicalExaminationDto[] patientClinicalExaminations) {
            return base.Channel.SavePatientClinicalExaminationsAsync(patientClinicalExaminations);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientMedicalMonitoringDtoResult GetPatientMedicalMonitorings(int patientConsultationId) {
            return base.Channel.GetPatientMedicalMonitorings(patientConsultationId);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalMonitoringDtoResult> GetPatientMedicalMonitoringsAsync(int patientConsultationId) {
            return base.Channel.GetPatientMedicalMonitoringsAsync(patientConsultationId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientMedicalMonitoringDtoResponse SavePatientMedicalMonitorings(Pheko.Common.DataTransformObjects.PatientMedicalMonitoringDto[] patientMedicalMonitorings) {
            return base.Channel.SavePatientMedicalMonitorings(patientMedicalMonitorings);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientMedicalMonitoringDtoResponse> SavePatientMedicalMonitoringsAsync(Pheko.Common.DataTransformObjects.PatientMedicalMonitoringDto[] patientMedicalMonitorings) {
            return base.Channel.SavePatientMedicalMonitoringsAsync(patientMedicalMonitorings);
        }
        
        public Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto GetPatientConsultationSickNote(int patientConsultationId) {
            return base.Channel.GetPatientConsultationSickNote(patientConsultationId);
        }
        
        public System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto> GetPatientConsultationSickNoteAsync(int patientConsultationId) {
            return base.Channel.GetPatientConsultationSickNoteAsync(patientConsultationId);
        }
        
        public Pheko.WebPresentation.PhekoService.PatientConsultationSickNoteDtoResponse SavePatientConsultationSickNote(Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto patientConsultationSickNoteDto) {
            return base.Channel.SavePatientConsultationSickNote(patientConsultationSickNoteDto);
        }
        
        public System.Threading.Tasks.Task<Pheko.WebPresentation.PhekoService.PatientConsultationSickNoteDtoResponse> SavePatientConsultationSickNoteAsync(Pheko.Common.DataTransformObjects.PatientConsultationSickNoteDto patientConsultationSickNoteDto) {
            return base.Channel.SavePatientConsultationSickNoteAsync(patientConsultationSickNoteDto);
        }
        
        public Pheko.Common.DataTransformObjects.CountryDto[] GetCountries() {
            return base.Channel.GetCountries();
        }
        
        public System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.CountryDto[]> GetCountriesAsync() {
            return base.Channel.GetCountriesAsync();
        }
        
        public Pheko.Common.DataTransformObjects.ProvinceDto[] GetCountryProvinces(System.Nullable<int> countryId) {
            return base.Channel.GetCountryProvinces(countryId);
        }
        
        public System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.ProvinceDto[]> GetCountryProvincesAsync(System.Nullable<int> countryId) {
            return base.Channel.GetCountryProvincesAsync(countryId);
        }
        
        public Pheko.Common.DataTransformObjects.FieldValueDto[] GetFieldValues(string tableName, string fieldName) {
            return base.Channel.GetFieldValues(tableName, fieldName);
        }
        
        public System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.FieldValueDto[]> GetFieldValuesAsync(string tableName, string fieldName) {
            return base.Channel.GetFieldValuesAsync(tableName, fieldName);
        }
        
        public Pheko.Common.DataTransformObjects.DoctorDto[] GetDoctors() {
            return base.Channel.GetDoctors();
        }
        
        public System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.DoctorDto[]> GetDoctorsAsync() {
            return base.Channel.GetDoctorsAsync();
        }
        
        public Pheko.Common.DataTransformObjects.SecurityRoleDto[] GetRoles() {
            return base.Channel.GetRoles();
        }
        
        public System.Threading.Tasks.Task<Pheko.Common.DataTransformObjects.SecurityRoleDto[]> GetRolesAsync() {
            return base.Channel.GetRolesAsync();
        }
        
        public System.Data.DataSet GetPatientSchedule(int patientId, int userId) {
            return base.Channel.GetPatientSchedule(patientId, userId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientScheduleAsync(int patientId, int userId) {
            return base.Channel.GetPatientScheduleAsync(patientId, userId);
        }
        
        public System.Data.DataSet GetPatientSickNoteSchedule(int patientConsultationId, int userId) {
            return base.Channel.GetPatientSickNoteSchedule(patientConsultationId, userId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientSickNoteScheduleAsync(int patientConsultationId, int userId) {
            return base.Channel.GetPatientSickNoteScheduleAsync(patientConsultationId, userId);
        }
        
        public System.Data.DataSet GetPatientScriptNoteSchedule(int patientConsultationId, int userId) {
            return base.Channel.GetPatientScriptNoteSchedule(patientConsultationId, userId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientScriptNoteScheduleAsync(int patientConsultationId, int userId) {
            return base.Channel.GetPatientScriptNoteScheduleAsync(patientConsultationId, userId);
        }
    }
}
